import fetch from 'node-fetch';
import { paramsToQuery } from '../utils';
/** TODO: refactor */
export const ApiRequest = async (endpoint, options, iexConfig = {}) => {
    const { useSecret, method, data, params } = {
        data: {},
        method: 'GET',
        useSecret: false,
        ...options,
    };
    const apiToken = process.env.IEX_API_TOKEN || iexConfig.apiToken;
    // tslint:disable-next-line: no-if-statement
    if (!apiToken) {
        throw new Error('IEX_API_TOKEN not found');
    }
    const secretToken = process.env.IEX_API_SECRET_TOKEN || iexConfig.secretToken;
    const version = process.env.IEX_API_VERSION || iexConfig.apiToken || 'v1';
    const apiEnv = process.env.IEX_API_ENV || iexConfig.apiToken || 'cloud';
    const baseUrl = `https://${apiEnv}.iexapis.com/${version}/`;
    const url = `${baseUrl}${endpoint}` +
        (method === 'POST' && useSecret
            ? ''
            : `${endpoint.includes('?') ? '&' : '?'}token=${useSecret ? secretToken : apiToken}`);
    const urlWithParams = params
        ? `${url}${url.includes('?') ? '&' : '?'}${paramsToQuery(params)}`
        : url;
    try {
        // console.log(urlWithParams);
        const response = method === 'GET'
            ? await fetch(urlWithParams)
            : await fetch(urlWithParams, {
                body: useSecret ? { ...data, token: secretToken } : data,
                method,
            });
        const json = await response.json();
        return json;
    }
    catch (error) {
        // console.log(error?.message);
        // console.log(response?.statusText);
        return null;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBpUmVxdWVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb3JlL0FwaVJlcXVlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLE1BQU0sWUFBWSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFrQnpDLHFCQUFxQjtBQUNyQixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsS0FBSyxFQUM3QixRQUFnQixFQUNoQixPQUFnQyxFQUNoQyxZQUE0QixFQUFFLEVBQ2hCLEVBQUU7SUFDaEIsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHO1FBQzFDLElBQUksRUFBRSxFQUFFO1FBQ1IsTUFBTSxFQUFFLEtBQUs7UUFDYixTQUFTLEVBQUUsS0FBSztRQUNoQixHQUFHLE9BQU87S0FDWCxDQUFDO0lBQ0YsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQztJQUVqRSw0Q0FBNEM7SUFDNUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUNiLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztLQUM1QztJQUVELE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLElBQUksU0FBUyxDQUFDLFdBQVcsQ0FBQztJQUM5RSxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsSUFBSSxTQUFTLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQztJQUMxRSxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxTQUFTLENBQUMsUUFBUSxJQUFJLE9BQU8sQ0FBQztJQUV4RSxNQUFNLE9BQU8sR0FBRyxXQUFXLE1BQU0sZ0JBQWdCLE9BQU8sR0FBRyxDQUFDO0lBQzVELE1BQU0sR0FBRyxHQUNQLEdBQUcsT0FBTyxHQUFHLFFBQVEsRUFBRTtRQUN2QixDQUFDLE1BQU0sS0FBSyxNQUFNLElBQUksU0FBUztZQUM3QixDQUFDLENBQUMsRUFBRTtZQUNKLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLFNBQVMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRTFGLE1BQU0sYUFBYSxHQUFHLE1BQU07UUFDMUIsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUNsRSxDQUFDLENBQUMsR0FBRyxDQUFDO0lBRVIsSUFBSTtRQUNGLDhCQUE4QjtRQUM5QixNQUFNLFFBQVEsR0FDWixNQUFNLEtBQUssS0FBSztZQUNkLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxhQUFhLENBQUM7WUFDNUIsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLGFBQWEsRUFBRTtnQkFDekIsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLElBQUksRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUk7Z0JBQ3hELE1BQU07YUFDUCxDQUFDLENBQUM7UUFDVCxNQUFNLElBQUksR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNuQyxPQUFPLElBQUksQ0FBQztLQUNiO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCwrQkFBK0I7UUFDL0IscUNBQXFDO1FBQ3JDLE9BQU8sSUFBSSxDQUFDO0tBQ2I7QUFDSCxDQUFDLENBQUMifQ==