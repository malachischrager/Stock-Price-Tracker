"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiRequest = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const utils_1 = require("../utils");
/** TODO: refactor */
exports.ApiRequest = async (endpoint, options, iexConfig = {}) => {
    const { useSecret, method, data, params } = Object.assign({ data: {}, method: 'GET', useSecret: false }, options);
    const apiToken = process.env.IEX_API_TOKEN || iexConfig.apiToken;
    // tslint:disable-next-line: no-if-statement
    if (!apiToken) {
        throw new Error('IEX_API_TOKEN not found');
    }
    const secretToken = process.env.IEX_API_SECRET_TOKEN || iexConfig.secretToken;
    const version = process.env.IEX_API_VERSION || iexConfig.apiToken || 'v1';
    const apiEnv = process.env.IEX_API_ENV || iexConfig.apiToken || 'cloud';
    const baseUrl = `https://${apiEnv}.iexapis.com/${version}/`;
    const url = `${baseUrl}${endpoint}` +
        (method === 'POST' && useSecret
            ? ''
            : `${endpoint.includes('?') ? '&' : '?'}token=${useSecret ? secretToken : apiToken}`);
    const urlWithParams = params
        ? `${url}${url.includes('?') ? '&' : '?'}${utils_1.paramsToQuery(params)}`
        : url;
    try {
        // console.log(urlWithParams);
        const response = method === 'GET'
            ? await node_fetch_1.default(urlWithParams)
            : await node_fetch_1.default(urlWithParams, {
                body: useSecret ? Object.assign(Object.assign({}, data), { token: secretToken }) : data,
                method,
            });
        const json = await response.json();
        return json;
    }
    catch (error) {
        // console.log(error?.message);
        // console.log(response?.statusText);
        return null;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBpUmVxdWVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb3JlL0FwaVJlcXVlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsNERBQStCO0FBQy9CLG9DQUF5QztBQWtCekMscUJBQXFCO0FBQ1IsUUFBQSxVQUFVLEdBQUcsS0FBSyxFQUM3QixRQUFnQixFQUNoQixPQUFnQyxFQUNoQyxZQUE0QixFQUFFLEVBQ2hCLEVBQUU7SUFDaEIsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxtQkFDdkMsSUFBSSxFQUFFLEVBQUUsRUFDUixNQUFNLEVBQUUsS0FBSyxFQUNiLFNBQVMsRUFBRSxLQUFLLElBQ2IsT0FBTyxDQUNYLENBQUM7SUFDRixNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDO0lBRWpFLDRDQUE0QztJQUM1QyxJQUFJLENBQUMsUUFBUSxFQUFFO1FBQ2IsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0tBQzVDO0lBRUQsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsSUFBSSxTQUFTLENBQUMsV0FBVyxDQUFDO0lBQzlFLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxJQUFJLFNBQVMsQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDO0lBQzFFLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxJQUFJLFNBQVMsQ0FBQyxRQUFRLElBQUksT0FBTyxDQUFDO0lBRXhFLE1BQU0sT0FBTyxHQUFHLFdBQVcsTUFBTSxnQkFBZ0IsT0FBTyxHQUFHLENBQUM7SUFDNUQsTUFBTSxHQUFHLEdBQ1AsR0FBRyxPQUFPLEdBQUcsUUFBUSxFQUFFO1FBQ3ZCLENBQUMsTUFBTSxLQUFLLE1BQU0sSUFBSSxTQUFTO1lBQzdCLENBQUMsQ0FBQyxFQUFFO1lBQ0osQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsU0FBUyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFFMUYsTUFBTSxhQUFhLEdBQUcsTUFBTTtRQUMxQixDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcscUJBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUNsRSxDQUFDLENBQUMsR0FBRyxDQUFDO0lBRVIsSUFBSTtRQUNGLDhCQUE4QjtRQUM5QixNQUFNLFFBQVEsR0FDWixNQUFNLEtBQUssS0FBSztZQUNkLENBQUMsQ0FBQyxNQUFNLG9CQUFLLENBQUMsYUFBYSxDQUFDO1lBQzVCLENBQUMsQ0FBQyxNQUFNLG9CQUFLLENBQUMsYUFBYSxFQUFFO2dCQUN6QixJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUMsaUNBQU0sSUFBSSxLQUFFLEtBQUssRUFBRSxXQUFXLElBQUcsQ0FBQyxDQUFDLElBQUk7Z0JBQ3hELE1BQU07YUFDUCxDQUFDLENBQUM7UUFDVCxNQUFNLElBQUksR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNuQyxPQUFPLElBQUksQ0FBQztLQUNiO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCwrQkFBK0I7UUFDL0IscUNBQXFDO1FBQ3JDLE9BQU8sSUFBSSxDQUFDO0tBQ2I7QUFDSCxDQUFDLENBQUMifQ==